import { OnRequestFunction } from 'messaging-api-common';
export declare type Attachment = {
    fallback: string;
    pretext?: string;
    color?: string;
    authorName?: string;
    authorLink?: string;
    authorIcon?: string;
    title?: string;
    titleLink?: string;
    text?: string;
    fields?: {
        title: string;
        value: string;
        short: boolean;
    }[];
    imageUrl?: string;
    thumbUrl?: string;
    footer?: string;
    footerIcon?: string;
    callbackId?: string;
    attachmentType?: string;
    actions: {
        name?: string;
        text?: string;
        type?: string;
        value?: string;
        style?: string;
        options?: {
            text: string;
            value: string;
        }[];
        confirm?: {
            title?: string;
            text?: string;
            okText?: string;
            dismissText?: string;
        };
    }[];
    ts?: number;
};
export declare type Message = {
    text?: string;
    attachments?: Attachment[] | string;
    blocks?: MessageBlock[] | string;
};
export declare type CompositionObject = TextObject | ConfirmObject | OptionObject;
export declare type TextObject = PlainTextObject | MrkdwnObject;
export declare type PlainTextObject = {
    type: 'plain_text';
    text: string;
    emoji?: boolean;
};
export declare type MrkdwnObject = {
    type: 'mrkdwn';
    text: string;
    verbatim?: boolean;
};
export declare type ConfirmObject = {
    title: PlainTextObject;
    text: TextObject;
    confirm: PlainTextObject;
    deny: PlainTextObject;
};
export declare type OptionObject = {
    text: PlainTextObject;
    value: string;
    url?: string;
};
export declare type OptionGroupObject = {
    label: PlainTextObject;
    options: OptionObject[];
};
export declare type BlockElement = ButtonElement | DatepickerElement | ImageElement | MultiSelectElement | OverflowElement | PlainTextInputElement | RadioButtonsElement | SelectElement;
export declare type ButtonElement = {
    type: 'button';
    text: PlainTextObject;
    actionId: string;
    url?: string;
    value?: string;
    style?: 'primary' | 'danger';
    confirm?: ConfirmObject;
};
export declare type DatepickerElement = {
    type: 'datepicker';
    actionId: string;
    placeholder?: PlainTextObject;
    initialDate?: string;
    confirm?: ConfirmObject;
};
export declare type ImageElement = {
    type: 'image';
    imageUrl: string;
    altText: string;
};
export declare type MultiSelectElement = MultiStaticSelectElement | MultiExternalSelectElement | MultiUsersSelectElement | MultiConversationsSelectElement | MultiChannelsSelectElement;
export declare type MultiStaticSelectElement = {
    type: 'multi_static_select';
    placeholder: PlainTextObject;
    actionId: string;
    options: OptionObject[];
    optionGroups?: OptionGroupObject[];
    initialOptions?: OptionObject[];
    confirm?: ConfirmObject;
};
export declare type MultiExternalSelectElement = {
    type: 'multi_external_select';
    placeholder: PlainTextObject;
    actionId: string;
    minQueryLength?: number;
    initialOptions?: OptionObject[];
    confirm?: ConfirmObject;
};
export declare type MultiUsersSelectElement = {
    type: 'multi_users_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialUsers?: string[];
    confirm?: ConfirmObject;
};
export declare type MultiConversationsSelectElement = {
    type: 'multi_conversations_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialConversations?: string[];
    confirm?: ConfirmObject;
};
export declare type MultiChannelsSelectElement = {
    type: 'multi_channels_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialChannels?: string[];
    confirm?: ConfirmObject;
};
export declare type OverflowElement = {
    type: 'overflow';
    actionId: string;
    options: OptionObject[];
    confirm?: ConfirmObject;
};
export declare type PlainTextInputElement = {
    type: 'plain_text_input';
    actionId: string;
    placeholder?: PlainTextObject;
    initialValue: string;
    multiline?: boolean;
    minLength?: number;
    maxLength?: number;
};
export declare type RadioButtonsElement = {
    type: 'radio_buttons';
    actionId: string;
    options: OptionObject[];
    initialOption?: OptionObject;
    confirm?: ConfirmObject;
};
export declare type SelectElement = StaticSelectElement | ExternalSelectElement | UsersSelectElement | ConversationsSelectElement | ChannelsSelectElement;
export declare type StaticSelectElement = {
    type: 'static_select';
    placeholder: PlainTextObject;
    actionId: string;
    options: OptionObject[];
    optionGroups?: OptionGroupObject[];
    initialOption?: OptionObject;
    confirm?: ConfirmObject;
};
export declare type ExternalSelectElement = {
    type: 'external_select';
    placeholder: PlainTextObject;
    actionId: string;
    minQueryLength?: number;
    initialOption?: OptionObject;
    confirm?: ConfirmObject;
};
export declare type UsersSelectElement = {
    type: 'users_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialUser?: string;
    confirm?: ConfirmObject;
};
export declare type ConversationsSelectElement = {
    type: 'conversations_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialConversation?: string;
    confirm?: ConfirmObject;
};
export declare type ChannelsSelectElement = {
    type: 'channels_select';
    placeholder: PlainTextObject;
    actionId: string;
    initialChannel?: string;
    confirm?: ConfirmObject;
};
export declare type MessageBlock = ActionsBlock | ContextBlock | DividerBlock | FileBlock | ImageBlock | SectionBlock;
export declare type ModalBlock = ActionsBlock | ContextBlock | DividerBlock | ImageBlock | InputBlock | SectionBlock;
export declare type HomeBlock = ActionsBlock | ContextBlock | DividerBlock | ImageBlock | SectionBlock;
export declare type ActionsBlockElement = ButtonElement | SelectElement | OverflowElement | DatepickerElement;
export declare type ActionsBlock = {
    type: 'actions';
    elements: ActionsBlockElement[];
    blockId?: string;
};
export declare type ContextBlockElement = TextObject | ImageElement;
export declare type ContextBlock = {
    type: 'context';
    elements: ContextBlockElement[];
    blockId?: string;
};
export declare type DividerBlock = {
    type: 'divider';
    blockId?: string;
};
export declare type FileBlock = {
    type: 'file';
    externalId: string;
    source: string;
    blockId?: string;
};
export declare type ImageBlock = {
    type: 'image';
    imageUrl: string;
    altText: string;
    title?: PlainTextObject;
    blockId?: string;
};
export declare type InputBlockElement = PlainTextInputElement | SelectElement | MultiSelectElement | DatepickerElement;
export declare type InputBlock = {
    type: 'input';
    label: PlainTextObject;
    element: InputBlockElement;
    blockId?: string;
    hint?: PlainTextObject;
    optional?: boolean;
};
export declare type SectionBlock = {
    type: 'section';
    text: TextObject;
    blockId?: string;
    fields?: TextObject[];
    accessory?: BlockElement;
};
export declare type ViewCommon = {
    privateMetadata?: string;
    callbackId?: string;
    externalId?: string;
};
export declare type ModalView = {
    type: 'modal';
    title: PlainTextObject;
    blocks: ModalBlock[];
    close?: PlainTextObject;
    submit?: PlainTextObject;
    clearOnClose?: boolean;
    notifyOnClose?: boolean;
} & ViewCommon;
export declare type HomeView = {
    type: 'home';
    blocks: HomeBlock[];
} & ViewCommon;
export declare type View = ModalView | HomeView;
export declare type SendMessageSuccessResponse = 'ok';
export declare type OAuthAPIResponse = Record<string, any> & {
    ok: boolean;
};
export declare type AvailableMethod = 'api.test' | 'apps.permissions.info' | 'apps.permissions.request' | 'auth.revoke' | 'auth.test' | 'bots.info' | 'channels.archive' | 'channels.create' | 'channels.history' | 'channels.info' | 'channels.invite' | 'channels.join' | 'channels.kick' | 'channels.leave' | 'channels.list' | 'channels.mark' | 'channels.rename' | 'channels.replies' | 'channels.setPurpose' | 'channels.setTopic' | 'channels.unarchive' | 'chat.delete' | 'chat.meMessage' | 'chat.postEphemeral' | 'chat.postMessage' | 'chat.getPermalink' | 'chat.scheduleMessage' | 'chat.deleteScheduledMessage' | 'chat.scheduledMessages.list' | 'chat.unfurl' | 'chat.update' | 'conversations.archive' | 'conversations.close' | 'conversations.create' | 'conversations.history' | 'conversations.info' | 'conversations.invite' | 'conversations.join' | 'conversations.kick' | 'conversations.leave' | 'conversations.list' | 'conversations.members' | 'conversations.open' | 'conversations.rename' | 'conversations.replies' | 'conversations.setPurpose' | 'conversations.setTopic' | 'conversations.unarchive' | 'dnd.endDnd' | 'dnd.endSnooze' | 'dnd.info' | 'dnd.setSnooze' | 'dnd.teamInfo' | 'emoji.list' | 'files.comments.add' | 'files.comments.delete' | 'files.comments.edit' | 'files.delete' | 'files.info' | 'files.list' | 'files.revokePublicURL' | 'files.sharedPublicURL' | 'files.upload' | 'groups.archive' | 'groups.create' | 'groups.createChild' | 'groups.history' | 'groups.info' | 'groups.invite' | 'groups.kick' | 'groups.leave' | 'groups.list' | 'groups.mark' | 'groups.open' | 'groups.rename' | 'groups.replies' | 'groups.setPurpose' | 'groups.setTopic' | 'groups.unarchive' | 'im.close' | 'im.history' | 'im.list' | 'im.mark' | 'im.open' | 'im.replies' | 'oauth.access' | 'oauth.token' | 'pins.add' | 'pins.list' | 'pins.remove' | 'reactions.add' | 'reactions.get' | 'reactions.list' | 'reactions.remove' | 'reminders.add' | 'reminders.complete' | 'reminders.delete' | 'reminders.info' | 'reminders.list' | 'rtm.connect' | 'rtm.start' | 'search.all' | 'search.files' | 'search.messages' | 'stars.add' | 'stars.list' | 'stars.remove' | 'team.accessLogs' | 'team.billableInfo' | 'team.info' | 'team.integrationLogs' | 'team.profile.get' | 'usergroups.create' | 'usergroups.disable' | 'usergroups.enable' | 'usergroups.list' | 'usergroups.update' | 'usergroups.users.list' | 'usergroups.users.update' | 'users.deletePhoto' | 'users.getPresence' | 'users.identity' | 'users.info' | 'users.list' | 'users.setActive' | 'users.setPhoto' | 'users.setPresence' | 'users.profile.get' | 'users.profile.set' | 'views.open' | 'views.publish' | 'views.update' | 'views.push';
export interface User {
    id: string;
    name: string;
    realName: string;
}
export declare type Channel = {
    id: string;
    name: string;
    members?: User[];
};
declare type CommonOptions = {
    token?: string;
    accessToken?: string;
};
export declare type GetInfoOptions = CommonOptions & {
    includeLocale?: boolean;
};
export declare type UserInfoOptions = CommonOptions & {
    includeLocale?: boolean;
};
export interface PostMessageOptionalOptions extends CommonOptions {
    asUser?: boolean;
    attachments?: string | Attachment[];
    iconEmoji?: string;
    iconUrl?: string;
    linkNames?: boolean;
    parse?: 'none' | 'full';
    replyBroadcast?: boolean;
    threadTs?: string;
    unfurlLinks?: boolean;
    unfurlMedia?: boolean;
    username?: string;
}
export declare type PostEphemeralOptionalOptions = CommonOptions & {
    asUser?: boolean;
    attachments?: string | Attachment[];
    linkNames?: boolean;
    parse?: 'none' | 'full';
};
export declare type PostMessageOptions = PostMessageOptionalOptions & Message & {
    channel: string;
};
export declare type PostEphemeralOptions = PostEphemeralOptionalOptions & Message & {
    channel: string;
    user: string;
};
export declare type UpdateMessageOptions = CommonOptions & Message & {
    channel: string;
    ts: string;
    asUser?: boolean;
    attachments?: string | Attachment[];
    linkNames?: boolean;
    parse?: 'none' | 'full';
};
export declare type DeleteMessageOptions = CommonOptions & {
    channel: string;
    ts: string;
    asUser?: boolean;
};
export declare type GetPermalinkOptions = CommonOptions & {
    channel: string;
    messageTs: string;
};
export declare type MeMessageOptions = CommonOptions & {
    channel: string;
    text: string;
};
export declare type DeleteScheduledMessageOptions = CommonOptions & {
    channel: string;
    scheduledMessageId: string;
    asUser?: boolean;
};
export declare type ScheduleMessageOptions = CommonOptions & Message & {
    channel: string;
    asUser?: boolean;
    attachments?: string | Attachment[];
    linkNames?: boolean;
    parse?: 'none' | 'full';
    replyBroadcast?: boolean;
    threadTs?: string;
    unfurlLinks?: boolean;
    unfurlMedia?: boolean;
    postAt?: string;
};
export declare type GetScheduledMessagesOptions = CommonOptions & {
    channel?: string;
    cursor?: string;
    latest?: string;
    limit?: number;
    oldest?: string;
};
export declare type ConversationMembersOptions = CommonOptions & {
    cursor?: string;
    limit?: number;
};
export declare type ConversationListOptions = CommonOptions & {
    cursor?: string;
    excludeArchived?: boolean;
    limit?: number;
    types?: string;
};
export declare type UserListOptions = CommonOptions & {
    cursor?: string;
    includeLocale?: boolean;
    limit?: number;
};
export declare type ClientConfig = {
    accessToken: string;
    origin?: string;
    onRequest?: OnRequestFunction;
};
export declare type UnfurlOptions = CommonOptions & {
    ts: string;
    unfurls: {};
    userAuthMessage?: string;
    userAuthRequired?: boolean;
    userAuthUrl?: string;
};
export declare type OpenViewOptions = {
    triggerId: string;
    view: View;
};
export declare type PublishViewOptions = {
    userId: string;
    view: View;
    hash?: string;
};
export declare type UpdateViewOptions = {
    view: View;
    externalId?: string;
    hash?: string;
    viewId?: string;
};
export declare type PushViewOptions = {
    triggerId: string;
    view: View;
};
export {};
//# sourceMappingURL=SlackTypes.d.ts.map