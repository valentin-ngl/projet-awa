import { AxiosInstance } from 'axios';
import * as Types from './SlackTypes';
export default class SlackOAuthClient {
    /**
     * @deprecated Use `new SlackOAuthClient(...)` instead.
     */
    static connect(config: Types.ClientConfig): SlackOAuthClient;
    /**
     * The underlying axios instance.
     */
    readonly axios: AxiosInstance;
    /**
     * The access token used by the client.
     */
    readonly accessToken: string;
    /**
     * chat.* APIs.
     */
    readonly chat: {
        postMessage: (options: Types.PostMessageOptions) => Promise<Types.OAuthAPIResponse>;
        postEphemeral: (options: Types.PostEphemeralOptions) => Promise<Types.OAuthAPIResponse>;
        update: (options: Types.UpdateMessageOptions) => Promise<Types.OAuthAPIResponse>;
        delete: (options: Types.DeleteMessageOptions) => Promise<Types.OAuthAPIResponse>;
        meMessage: (options: Types.MeMessageOptions) => Promise<Types.OAuthAPIResponse>;
        getPermalink: (options: Types.GetPermalinkOptions) => Promise<Types.OAuthAPIResponse>;
        scheduleMessage: (options: Types.ScheduleMessageOptions) => Promise<Types.OAuthAPIResponse>;
        deleteScheduledMessage: (options: Types.DeleteScheduledMessageOptions) => Promise<Types.OAuthAPIResponse>;
        unfurl: (options: Types.UnfurlOptions) => Promise<Types.OAuthAPIResponse>;
        scheduledMessages: {
            list: (options: Types.GetScheduledMessagesOptions) => Promise<Types.OAuthAPIResponse>;
        };
    };
    /**
     * views.* APIs.
     */
    readonly views: {
        open: (options: Types.OpenViewOptions) => Promise<Types.OAuthAPIResponse>;
        publish: (options: Types.PublishViewOptions) => Promise<Types.OAuthAPIResponse>;
        push: (options: Types.PushViewOptions) => Promise<Types.OAuthAPIResponse>;
        update: (options: Types.UpdateViewOptions) => Promise<Types.OAuthAPIResponse>;
    };
    /**
     * The callback to be called when receiving requests.
     */
    private onRequest?;
    constructor(config: Types.ClientConfig);
    callMethod(method: Types.AvailableMethod, inputBody?: Record<string, any>): Promise<Types.OAuthAPIResponse>;
    /**
     * Gets information about a channel.
     *
     * https://api.slack.com/methods/channels.info
     */
    getChannelInfo(channelId: string, options?: Types.GetInfoOptions): Promise<Types.Channel>;
    /**
     * Retrieve information about a conversation.
     *
     * https://api.slack.com/methods/conversations.info
     */
    getConversationInfo(channelId: string, options?: Types.GetInfoOptions): Promise<Types.Channel>;
    /**
     * Retrieve members of a conversation.
     *
     * https://api.slack.com/methods/conversations.members
     */
    getConversationMembers(channelId: string, options?: Types.ConversationMembersOptions): Promise<{
        members: string[];
        next?: string;
    }>;
    getAllConversationMembers(channelId: string, options?: Omit<Types.ConversationMembersOptions, 'cursor'>): Promise<string[]>;
    /**
     * Lists all channels in a Slack team.
     *
     * https://api.slack.com/methods/conversations.list
     */
    getConversationList(options?: Types.ConversationListOptions): Promise<{
        channels: Types.Channel[];
        next?: string;
    }>;
    getAllConversationList(options?: Omit<Types.ConversationListOptions, 'cursor'>): Promise<Types.Channel[]>;
    /**
     * Sends a message to a channel.
     *
     * https://api.slack.com/methods/chat.postMessage
     */
    postMessage(channel: string, inputMessage: Types.Message | string, options?: Types.PostMessageOptionalOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Sends a message to a channel.
     *
     * https://api.slack.com/methods/chat.postMessage
     */
    _postMessage(options: Types.PostMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * https://api.slack.com/methods/chat.postEphemeral
     */
    postEphemeral(channel: string, user: string, inputMessage: Types.Message | string, options?: Types.PostEphemeralOptionalOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Sends an ephemeral message to a user in a channel.
     *
     * https://api.slack.com/methods/chat.postEphemeral
     */
    _postEphemeral(options: Types.PostEphemeralOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Updates a message.
     *
     * https://api.slack.com/methods/chat.update
     */
    _updateMessage(options: Types.UpdateMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Deletes a message.
     *
     * https://api.slack.com/methods/chat.delete
     */
    _deleteMessage(options: Types.DeleteMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Share a me message into a channel.
     *
     * https://api.slack.com/methods/chat.meMessage
     */
    _meMessage(options: Types.MeMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Retrieve a permalink URL for a specific extant message
     *
     * https://api.slack.com/methods/chat.getPermalink
     */
    _getPermalink(options: Types.GetPermalinkOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Schedules a message to be sent to a channel.
     *
     * https://api.slack.com/methods/chat.scheduleMessage
     */
    _scheduleMessage(options: Types.ScheduleMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Deletes a pending scheduled message from the queue.
     *
     * https://api.slack.com/methods/chat.deleteScheduledMessage
     */
    _deleteScheduledMessage(options: Types.DeleteScheduledMessageOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Returns a list of scheduled messages.
     *
     * https://api.slack.com/methods/chat.scheduledMessages.list
     */
    _getScheduledMessages(options?: Types.GetScheduledMessagesOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Provide custom unfurl behavior for user-posted URLs
     *
     * https://api.slack.com/methods/chat.unfurl
     */
    _unfurl(options: Types.UnfurlOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Open a view for a user.
     *
     * https://api.slack.com/methods/views.open
     */
    _openView(options: Types.OpenViewOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Publish a static view for a User.
     *
     * https://api.slack.com/methods/views.publish
     */
    _publishView(options: Types.PublishViewOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Update an existing view.
     *
     * https://api.slack.com/methods/views.update
     */
    _updateView(options: Types.UpdateViewOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Push a view onto the stack of a root view.
     *
     * https://api.slack.com/methods/views.push
     */
    _pushView(options: Types.PushViewOptions): Promise<Types.OAuthAPIResponse>;
    /**
     * Gets information about a user.
     *
     * https://api.slack.com/methods/users.info
     */
    getUserInfo(userId: string, options?: Types.UserInfoOptions): Promise<Types.User>;
    /**
     * Lists all users in a Slack team.
     *
     * https://api.slack.com/methods/users.list
     */
    getUserList(options?: Types.UserListOptions): Promise<{
        members: Types.User[];
        next?: string;
    }>;
    getAllUserList(options?: Omit<Types.UserListOptions, 'cursor'>): Promise<Types.User[]>;
}
//# sourceMappingURL=SlackOAuthClient.d.ts.map