"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const isEmpty_1 = __importDefault(require("lodash/isEmpty"));
function createMiddleware(bot) {
    const requestHandler = bot.createRequestHandler();
    const wrapper = (fn) => (req, res, next) => fn(req, res).catch((err) => next(err));
    return wrapper((req, res) => __awaiter(this, void 0, void 0, function* () {
        if (isEmpty_1.default(req.query) && !req.body) {
            throw new Error('createMiddleware(): Missing query and body, you may need a body parser. Use `body-parser` or other similar package before this middleware.');
        }
        const response = yield requestHandler(Object.assign(Object.assign({}, req.query), req.body), {
            method: req.method,
            path: req.path,
            query: req.query,
            headers: req.headers,
        });
        if (response) {
            res.set(response.headers || {});
            res.status(response.status || 200);
            res.send(response.body || '');
        }
        else {
            res.status(200);
            res.send('');
        }
    }));
}
exports.default = createMiddleware;
//# sourceMappingURL=createMiddleware.js.map