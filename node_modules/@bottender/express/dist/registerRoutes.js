"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const createMiddleware_1 = __importDefault(require("./createMiddleware"));
function registerRoutes(server, bot, config = {}) {
    const path = config.path || '/';
    server.use((req, res, next) => __awaiter(this, void 0, void 0, function* () {
        const { rawBody } = req;
        if (req.path !== path) {
            next();
            return;
        }
        const url = `https://${req.get('host')}${req.originalUrl}`;
        const { shouldNext, response } = yield bot.connector.preprocess({
            method: req.method,
            url,
            headers: req.headers,
            query: req.query,
            rawBody,
            body: req.body,
        });
        if (shouldNext) {
            next();
        }
        else if (response) {
            res.status(response.status);
            if (response.body) {
                res.send(response.body);
            }
        }
    }));
    server.post(path, createMiddleware_1.default(bot));
    return server;
}
exports.default = registerRoutes;
//# sourceMappingURL=registerRoutes.js.map