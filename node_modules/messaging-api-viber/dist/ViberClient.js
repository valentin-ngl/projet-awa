"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_error_1 = __importDefault(require("axios-error"));
const axios_1 = __importDefault(require("axios"));
const ts_invariant_1 = __importDefault(require("ts-invariant"));
const warning_1 = __importDefault(require("warning"));
const messaging_api_common_1 = require("messaging-api-common");
function transformMessageCase(message) {
    const _a = message, { keyboard, richMedia } = _a, others = __rest(_a, ["keyboard", "richMedia"]);
    return Object.assign(Object.assign(Object.assign({}, messaging_api_common_1.snakecaseKeysDeep(others)), (keyboard ? { keyboard: messaging_api_common_1.pascalcaseKeysDeep(keyboard) } : undefined)), (richMedia
        ? {
            richMedia: messaging_api_common_1.pascalcaseKeysDeep(richMedia),
        }
        : undefined));
}
/**
 * https://developers.viber.com/docs/api/rest-bot-api/#viber-rest-api
 */
class ViberClient {
    constructor(config) {
        ts_invariant_1.default(typeof config !== 'string', `ViberClient: do not allow constructing client with ${config} string. Use object instead.`);
        this.accessToken = config.accessToken;
        this.sender = config.sender;
        this.onRequest = config.onRequest || messaging_api_common_1.onRequest;
        const { origin } = config;
        this.axios = axios_1.default.create({
            baseURL: `${origin || 'https://chatapi.viber.com'}/pa/`,
            headers: {
                'Content-Type': 'application/json',
                'X-Viber-Auth-Token': this.accessToken,
            },
        });
        this.axios.interceptors.request.use(messaging_api_common_1.createRequestInterceptor({ onRequest: this.onRequest }));
    }
    /**
     * @deprecated Use `new ViberClient(...)` instead.
     */
    static connect(config) {
        warning_1.default(false, '`ViberClient.connect(...)` is deprecated. Use `new ViberClient(...)` instead.');
        return new ViberClient(config);
    }
    _callAPI(path, body = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const response = yield this.axios.post(path, 
                // we can't apply a deep snake_case transform here
                // because it accept only PascalCase for keyboard and rich media
                messaging_api_common_1.snakecaseKeys(body, { deep: false }));
                const { config, request } = response;
                const data = messaging_api_common_1.camelcaseKeysDeep(response.data);
                if (data.status !== 0) {
                    throw new axios_error_1.default(`Viber API - ${data.statusMessage}`, {
                        config,
                        request,
                        response,
                    });
                }
                return data;
            }
            catch (err) {
                throw new axios_error_1.default(err.message, err);
            }
        });
    }
    /**
     * Webhooks
     *
     * https://viber.github.io/docs/api/rest-bot-api/#webhooks
     */
    /**
     * Setting a Webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#setting-a-webhook
     */
    setWebhook(url, optionsOrEventTypes = {}) {
        const options = Array.isArray(optionsOrEventTypes)
            ? { eventTypes: optionsOrEventTypes }
            : optionsOrEventTypes;
        return this._callAPI('/set_webhook', Object.assign({ url }, options));
    }
    /**
     * Removing your webhook
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#removing-your-webhook
     */
    removeWebhook() {
        return this.setWebhook('');
    }
    /**
     * Send Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#send-message
     */
    sendMessage(receiver, message) {
        return this._callAPI('/send_message', Object.assign({ receiver, sender: this.sender }, transformMessageCase(message)));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
    sendText(receiver, text, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'text', text }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
    sendPicture(receiver, { text, media, thumbnail }, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'picture', text,
            media,
            thumbnail }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
    sendVideo(receiver, { media, size, thumbnail, duration }, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'video', media,
            size,
            thumbnail,
            duration }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
    sendFile(receiver, file, options) {
        return this.sendMessage(receiver, Object.assign(Object.assign({ type: 'file' }, file), options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
    sendContact(receiver, contact, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'contact', contact }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
    sendLocation(receiver, { lat, lon }, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'location', location: { lat, lon } }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
    sendURL(receiver, url, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'url', media: url }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
    sendSticker(receiver, stickerId, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'sticker', stickerId }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
    sendCarouselContent(receiver, richMedia, options) {
        return this.sendMessage(receiver, Object.assign({ type: 'rich_media', minApiVersion: 2, richMedia }, options));
    }
    /**
     * Broadcast Message
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#broadcast-message
     */
    broadcastMessage(broadcastList, message) {
        return this._callAPI('/broadcast_message', Object.assign({ broadcastList, sender: this.sender }, transformMessageCase(message)));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#text-message
     */
    broadcastText(broadcastList, text, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'text', text }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#picture-message
     */
    broadcastPicture(broadcastList, { text, media, thumbnail }, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'picture', text,
            media,
            thumbnail }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#video-message
     */
    broadcastVideo(broadcastList, { media, size, thumbnail, duration }, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'video', media,
            size,
            thumbnail,
            duration }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#file-message
     */
    broadcastFile(broadcastList, file, options) {
        return this.broadcastMessage(broadcastList, Object.assign(Object.assign({ type: 'file' }, file), options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#contact-message
     */
    broadcastContact(broadcastList, contact, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'contact', contact }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#location-message
     */
    broadcastLocation(broadcastList, { lat, lon }, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'location', location: { lat, lon } }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#url-message
     */
    broadcastURL(broadcastList, url, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'url', media: url }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#sticker-message
     */
    broadcastSticker(broadcastList, stickerId, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'sticker', stickerId }, options));
    }
    /**
     * https://developers.viber.com/docs/api/rest-bot-api/#carousel-content-message
     */
    broadcastCarouselContent(broadcastList, richMedia, options) {
        return this.broadcastMessage(broadcastList, Object.assign({ type: 'rich_media', minApiVersion: 2, richMedia }, options));
    }
    /**
     * Get Account Info
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-account-info
     */
    getAccountInfo() {
        return this._callAPI('/get_account_info');
    }
    /**
     * Get User Details
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-user-details
     */
    getUserDetails(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const { user } = yield this._callAPI('/get_user_details', { id });
            return user;
        });
    }
    /**
     * Get Online
     *
     * https://developers.viber.com/docs/api/rest-bot-api/#get-online
     */
    getOnlineStatus(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = yield this._callAPI('/get_online', { ids });
            return data.users;
        });
    }
}
exports.default = ViberClient;
//# sourceMappingURL=ViberClient.js.map