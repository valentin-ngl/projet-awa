import FormData from 'form-data';
import { AxiosInstance } from 'axios';
import * as Types from './MessengerTypes';
export default class MessengerClient {
    /**
     * @deprecated Use `new MessengerClient(...)` instead.
     */
    static connect(config: Types.ClientConfig): MessengerClient;
    /**
     * The underlying axios instance.
     */
    readonly axios: AxiosInstance;
    /**
     * The version of the Facebook Graph API.
     */
    readonly version: string;
    /**
     * The access token used by the client.
     */
    readonly accessToken: string;
    /**
     * The app secret used by the client.
     */
    readonly appSecret?: string;
    /**
     * The app ID used by the client.
     */
    readonly appId?: string;
    /**
     * The callback to be called when receiving requests.
     */
    private onRequest?;
    constructor(config: Types.ClientConfig);
    /**
     * Get Page Info
     *
     * https://developers.facebook.com/docs/graph-api/reference/page/
     * id, name
     */
    getPageInfo({ fields, accessToken: customAccessToken, }?: Types.AccessTokenOptions & {
        fields?: string[];
    }): Promise<Types.PageInfo>;
    /**
     * Debug Token
     *
     * https://developers.facebook.com/docs/facebook-login/access-tokens/debugging-and-error-handling
     */
    debugToken({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.TokenInfo>;
    /**
     * Create Subscription
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    createSubscription({ object, callbackUrl, fields, includeValues, verifyToken, accessToken: appAccessToken, }: {
        object?: 'user' | 'page' | 'permissions' | 'payments';
        callbackUrl: string;
        fields?: string[];
        includeValues?: boolean;
        verifyToken: string;
        accessToken: string;
    }): Promise<{
        success: boolean;
    }>;
    /**
     * Get Subscriptions
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    getSubscriptions({ accessToken: appAccessToken, }?: {
        accessToken?: string;
    }): Promise<Types.MessengerSubscription[]>;
    /**
     * Extract page subscription from subscriptions
     *
     * https://developers.facebook.com/docs/graph-api/reference/app/subscriptions
     */
    getPageSubscription({ accessToken: appAccessToken, }?: {
        accessToken?: string;
    }): Promise<Types.MessengerSubscription>;
    /**
     *  Messaging Feature Review API
     *
     *  https://developers.facebook.com/docs/messenger-platform/reference/messaging-feature-review-api
     */
    getMessagingFeatureReview({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.MessagingFeatureReview[]>;
    /**
     * Get User Profile
     *
     * https://www.quora.com/How-connect-Facebook-user-id-to-sender-id-in-the-Facebook-messenger-platform
     * first_name, last_name, profile_pic, locale, timezone, gender
     */
    getUserProfile(userId: string, { fields, accessToken: customAccessToken, }?: {
        fields?: Types.UserProfileField[];
        accessToken?: string;
    }): Promise<Types.User>;
    /**
     * Messenger Profile
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api
     */
    getMessengerProfile(fields: string[], { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MessengerProfile[]>;
    setMessengerProfile(profile: Types.MessengerProfile, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteMessengerProfile(fields: string[], { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Get Started Button
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/get-started-button
     */
    getGetStarted(options?: Types.AccessTokenOptions): Promise<{
        payload: string;
    } | null>;
    setGetStarted(payload: string, options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteGetStarted(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Persistent Menu
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/persistent-menu
     */
    getPersistentMenu(options?: Types.AccessTokenOptions): Promise<Types.PersistentMenu | null>;
    setPersistentMenu(menuItems: Types.MenuItem[] | Types.PersistentMenuItem[], { composerInputDisabled, ...options }?: {
        composerInputDisabled?: boolean;
        accessToken?: string;
    }): Promise<Types.MutationSuccessResponse>;
    deletePersistentMenu(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * User Level Persistent Menu
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/persistent-menu#user_level_menu
     */
    getUserPersistentMenu(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.PersistentMenu | null>;
    setUserPersistentMenu(userId: string, menuItems: Types.MenuItem[] | Types.PersistentMenuItem[], { composerInputDisabled, accessToken: customAccessToken, }?: {
        composerInputDisabled?: boolean;
        accessToken?: string;
    }): Promise<Types.MutationSuccessResponse>;
    deleteUserPersistentMenu(userId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Greeting Text
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/greeting
     */
    getGreeting(options?: Types.AccessTokenOptions): Promise<Types.GreetingConfig[] | null>;
    setGreeting(greeting: string | Types.GreetingConfig[], options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteGreeting(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Ice Breakers
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/ice-breakers
     */
    getIceBreakers(options?: Types.AccessTokenOptions): Promise<Types.IceBreaker[] | null>;
    setIceBreakers(iceBreakers: Types.IceBreaker[], options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteIceBreakers(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Whitelisted Domains
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/domain-whitelisting
     */
    getWhitelistedDomains(options?: Types.AccessTokenOptions): Promise<string[] | null>;
    setWhitelistedDomains(whitelistedDomains: string[], options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteWhitelistedDomains(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Account Linking URL
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/account-linking-url
     */
    getAccountLinkingURL(options?: Types.AccessTokenOptions): Promise<string | null>;
    setAccountLinkingURL(accountLinkingUrl: string, options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteAccountLinkingURL(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Chat Extension Home URL
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messenger-profile-api/home-url
     */
    getHomeURL(options?: Types.AccessTokenOptions): Promise<{
        url: string;
        webviewHeightRatio: 'tall';
        webviewShareButton?: 'hide' | 'show';
        inTest: boolean;
    } | null>;
    setHomeURL(homeUrl: string, { webviewHeightRatio, webviewShareButton, inTest, }: {
        webviewHeightRatio?: 'tall';
        webviewShareButton?: 'hide' | 'show';
        inTest: boolean;
    }, options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    deleteHomeURL(options?: Types.AccessTokenOptions): Promise<Types.MutationSuccessResponse>;
    /**
     * Message tags
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags
     */
    getMessageTags({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<Types.MessageTagResponse>;
    /**
     * Send API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/send-api
     */
    sendRawBody(body: Record<string, any>): Promise<Types.SendMessageSuccessResponse>;
    sendMessage(psidOrRecipient: Types.PsidOrRecipient, message: Types.Message, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendMessageFormData(psidOrRecipient: Types.PsidOrRecipient, formdata: FormData, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    /**
     * Content Types
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages#content_types
     */
    sendAttachment(psidOrRecipient: Types.PsidOrRecipient, attachment: Types.Attachment, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendText(psidOrRecipient: Types.PsidOrRecipient, text: string, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendAudio(psidOrRecipient: Types.PsidOrRecipient, audio: string | Types.FileData | Types.MediaAttachmentPayload, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendImage(psidOrRecipient: Types.PsidOrRecipient, image: string | Types.FileData | Types.MediaAttachmentPayload, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendVideo(psidOrRecipient: Types.PsidOrRecipient, video: string | Types.FileData | Types.MediaAttachmentPayload, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendFile(psidOrRecipient: Types.PsidOrRecipient, file: string | Types.FileData | Types.MediaAttachmentPayload, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    /**
     * Message Templates
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/templates
     */
    sendTemplate(psidOrRecipient: Types.PsidOrRecipient, payload: Types.TemplateAttachmentPayload, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendButtonTemplate(psidOrRecipient: Types.PsidOrRecipient, text: string, buttons: Types.TemplateButton[], options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendGenericTemplate(psidOrRecipient: Types.PsidOrRecipient, elements: Types.TemplateElement[], options?: {
        imageAspectRatio?: 'horizontal' | 'square';
    } & Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendReceiptTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.ReceiptAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendMediaTemplate(psidOrRecipient: Types.PsidOrRecipient, elements: Types.MediaElement[], options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendAirlineBoardingPassTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.AirlineBoardingPassAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendAirlineCheckinTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.AirlineCheckinAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendAirlineItineraryTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.AirlineItineraryAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendAirlineUpdateTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.AirlineUpdateAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    sendOneTimeNotifReqTemplate(psidOrRecipient: Types.PsidOrRecipient, attrs: Types.OneTimeNotifReqAttributes, options?: Types.SendOption): Promise<Types.SendMessageSuccessResponse>;
    /**
     * Typing
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/sender-actions
     */
    sendSenderAction(psidOrRecipient: Types.PsidOrRecipient, senderAction: Types.SenderAction, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<Types.SendSenderActionResponse>;
    markSeen(psidOrRecipient: Types.PsidOrRecipient, options?: Record<string, any>): Promise<Types.SendSenderActionResponse>;
    typingOn(psidOrRecipient: Types.PsidOrRecipient, options?: Record<string, any>): Promise<Types.SendSenderActionResponse>;
    typingOff(psidOrRecipient: Types.PsidOrRecipient, options?: Record<string, any>): Promise<Types.SendSenderActionResponse>;
    /**
     * Send Batch Request
     *
     * https://developers.facebook.com/docs/graph-api/making-multiple-requests
     */
    sendBatch(batch: Types.BatchItem[], { includeHeaders, accessToken: customAccessToken, }?: Types.AccessTokenOptions & {
        includeHeaders?: boolean;
    }): Promise<{
        code: number;
        headers?: {
            name: string;
            value: string;
        }[];
        body: Record<string, any>;
    }[]>;
    /**
     * Label API
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/broadcast-messages/target-broadcasts
     */
    /**
     * Create Label
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#create_label
     */
    createLabel(name: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        id: string;
    }>;
    /**
     * Associating a Label to a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#associate_label
     */
    associateLabel(userId: string, labelId: number, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    /**
     * Removing a Label From a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#remove_label
     */
    dissociateLabel(userId: string, labelId: number, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    /**
     * Retrieving Labels Associated with a PSID
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#retrieving_labels_by_psid
     */
    getAssociatedLabels(userId: string, options?: {
        accessToken?: string;
        fields?: string[];
    }): Promise<{
        data: {
            name: string;
            id: string;
        }[];
        paging: {
            cursors: {
                before: string;
                after: string;
            };
        };
    }>;
    /**
     * Retrieving Label Details
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#get_label_details
     */
    getLabelDetails(labelId: number, options?: {
        accessToken?: string;
        fields?: string[];
    }): Promise<{
        name: string;
        id: string;
    }>;
    /**
     * Retrieving a List of All Labels
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#get_all_labels
     */
    getLabelList(options?: {
        accessToken?: string;
        fields?: string[];
    }): Promise<{
        data: {
            name: string;
            id: string;
        }[];
        paging: {
            cursors: {
                before: string;
                after: string;
            };
        };
    }>;
    /**
     * Deleting a Label
     *
     * https://developers.facebook.com/docs/messenger-platform/identity/custom-labels#delete_label
     */
    deleteLabel(labelId: number, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    /**
     * Upload API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/attachment-upload-api
     */
    uploadAttachment(type: 'audio' | 'image' | 'video' | 'file', attachment: string | Types.FileData, options?: Types.UploadOption): Promise<any>;
    uploadAudio(attachment: string | Types.FileData, options?: Types.UploadOption): Promise<any>;
    uploadImage(attachment: string | Types.FileData, options?: Types.UploadOption): Promise<any>;
    uploadVideo(attachment: string | Types.FileData, options?: Types.UploadOption): Promise<any>;
    uploadFile(attachment: string | Types.FileData, options?: Types.UploadOption): Promise<any>;
    /**
     * Handover Protocol API
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol
     */
    /**
     * Pass Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/pass-thread-control
     */
    passThreadControl(recipientId: string, targetAppId: number, metadata?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    passThreadControlToPageInbox(recipientId: string, metadata?: string, options?: Record<string, any>): Promise<{
        success: true;
    }>;
    /**
     * Take Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/take-thread-control
     */
    takeThreadControl(recipientId: string, metadata?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    /**
     * Request Thread Control
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol/request-thread-control/
     */
    requestThreadControl(recipientId: string, metadata?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
    /**
     * Secondary Receivers List
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/handover-protocol/secondary-receivers
     */
    getSecondaryReceivers({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<{
        id: string;
        name: string;
    }[]>;
    /**
     * Getting the Thread Owner
     *
     * https://developers.facebook.com/docs/messenger-platform/handover-protocol/get-thread-owner
     */
    getThreadOwner(recipientId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        appId: string;
    }>;
    /**
     * Page Messaging Insights API
     *
     * https://developers.facebook.com/docs/messenger-platform/reference/messaging-insights-api
     */
    getInsights(metrics: Types.InsightMetric[], options?: Types.InsightOptions): Promise<any>;
    getBlockedConversations(options: Types.InsightOptions): Promise<{
        name: 'page_messages_blocked_conversations_unique';
        period: 'day';
        values: {
            value: number | object;
            endTime: string;
        }[];
    }>;
    getReportedConversations(options: Types.InsightOptions): Promise<{
        name: 'page_messages_reported_conversations_unique';
        period: 'day';
        values: {
            value: number | object;
            endTime: string;
        }[];
    }>;
    getTotalMessagingConnections(options: Types.InsightOptions): Promise<{
        name: 'page_messages_total_messaging_connections';
        period: 'day';
        values: {
            value: number | object;
            endTime: string;
        }[];
    }>;
    getNewConversations(options: Types.InsightOptions): Promise<{
        name: 'page_messages_new_conversations_unique';
        period: 'day';
        values: {
            value: number | object;
            endTime: string;
        }[];
    }>;
    /**
     * Built-in NLP API
     *
     * https://developers.facebook.com/docs/messenger-platform/built-in-nlp
     */
    setNLPConfigs(config?: Types.MessengerNLPConfig, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<any>;
    enableNLP(options?: Types.AccessTokenOptions): Promise<any>;
    disableNLP(options?: Types.AccessTokenOptions): Promise<any>;
    /**
     * Logging Custom Events
     *
     * https://developers.facebook.com/docs/app-events/bots-for-messenger#logging-custom-events
     */
    logCustomEvents({ appId, pageId, pageScopedUserId, events, }: {
        appId: number;
        pageId: number;
        pageScopedUserId: string;
        events: Record<string, any>[];
    }): Promise<any>;
    /**
     * https://developers.facebook.com/docs/messenger-platform/identity/id-matching#examples
     */
    getUserField({ field, userId, appSecret, app, page, accessToken: customAccessToken, }: {
        field: string;
        userId: string;
        appSecret: string;
        app?: string;
        page?: string;
        accessToken?: string;
    }): Promise<any>;
    /**
     * Given a user ID for a bot in Messenger, retrieve the IDs for apps owned by the same business
     */
    getIdsForApps({ userId, appSecret, app, page, accessToken, }: {
        userId: string;
        appSecret: string;
        app?: string;
        page?: string;
        accessToken?: string;
    }): Promise<any>;
    /**
     * Given a user ID for a Page (associated with a bot), retrieve the IDs for other Pages owned by the same business
     */
    getIdsForPages({ userId, appSecret, app, page, accessToken, }: {
        userId: string;
        appSecret: string;
        app?: string;
        page?: string;
        accessToken?: string;
    }): Promise<any>;
    /**
     * Personas API
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas
     */
    /**
     * Creating a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#create
     */
    createPersona(persona: Types.Persona, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        id: string;
    }>;
    /**
     * Retrieving a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#get
     */
    getPersona(personaId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        id: string;
        name: string;
        profilePictureUrl: string;
    }>;
    /**
     * Retrieving All Available Personas
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#retrieve_all
     */
    getPersonas(cursor?: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        data: {
            id: string;
            name: string;
            profilePictureUrl: string;
        }[];
        paging: {
            cursors: {
                before: string;
                after: string;
            };
        };
    }>;
    getAllPersonas({ accessToken: customAccessToken, }?: Types.AccessTokenOptions): Promise<{
        id: string;
        name: string;
        profilePictureUrl: string;
    }[]>;
    /**
     * Deleting a Persona
     *
     * https://developers.facebook.com/docs/messenger-platform/send-messages/personas/#remove
     */
    deletePersona(personaId: string, { accessToken: customAccessToken }?: Types.AccessTokenOptions): Promise<{
        success: true;
    }>;
}
//# sourceMappingURL=MessengerClient.d.ts.map