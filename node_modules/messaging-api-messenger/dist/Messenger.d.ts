import FormData from 'form-data';
import * as Types from './MessengerTypes';
declare function createMessage(payload: Types.Message, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createText(text: string, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAttachment(attachment: Types.Attachment, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAudio(audio: string | Types.MediaAttachmentPayload, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAudioFormData(audio: Types.FileData, options?: {
    quickReplies?: Types.QuickReply[];
}): FormData;
declare function createImage(image: string | Types.MediaAttachmentPayload, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createImageFormData(image: Types.FileData, options?: {
    quickReplies?: Types.QuickReply[];
}): FormData;
declare function createVideo(video: string | Types.MediaAttachmentPayload, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createVideoFormData(video: Types.FileData, options?: {
    quickReplies?: Types.QuickReply[];
}): FormData;
declare function createFile(file: string | Types.MediaAttachmentPayload, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createFileFormData(file: Types.FileData, options?: {
    quickReplies?: Types.QuickReply[];
}): FormData;
declare function createTemplate(payload: Types.TemplateAttachmentPayload, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createButtonTemplate(text: string, buttons: Types.TemplateButton[], options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createGenericTemplate(elements: Types.TemplateElement[], options?: {
    imageAspectRatio?: 'horizontal' | 'square';
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createMediaTemplate(elements: Types.MediaElement[], options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createReceiptTemplate(attrs: Types.ReceiptAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAirlineBoardingPassTemplate(attrs: Types.AirlineBoardingPassAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAirlineCheckinTemplate(attrs: Types.AirlineCheckinAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAirlineItineraryTemplate(attrs: Types.AirlineItineraryAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createAirlineUpdateTemplate(attrs: Types.AirlineUpdateAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare function createOneTimeNotifReqTemplate(attrs: Types.OneTimeNotifReqAttributes, options?: {
    quickReplies?: Types.QuickReply[];
}): Types.Message;
declare const Messenger: {
    createMessage: typeof createMessage;
    createText: typeof createText;
    createAttachment: typeof createAttachment;
    createAudio: typeof createAudio;
    createAudioFormData: typeof createAudioFormData;
    createImage: typeof createImage;
    createImageFormData: typeof createImageFormData;
    createVideo: typeof createVideo;
    createVideoFormData: typeof createVideoFormData;
    createFile: typeof createFile;
    createFileFormData: typeof createFileFormData;
    createTemplate: typeof createTemplate;
    createButtonTemplate: typeof createButtonTemplate;
    createGenericTemplate: typeof createGenericTemplate;
    createMediaTemplate: typeof createMediaTemplate;
    createReceiptTemplate: typeof createReceiptTemplate;
    createAirlineBoardingPassTemplate: typeof createAirlineBoardingPassTemplate;
    createAirlineCheckinTemplate: typeof createAirlineCheckinTemplate;
    createAirlineItineraryTemplate: typeof createAirlineItineraryTemplate;
    createAirlineUpdateTemplate: typeof createAirlineUpdateTemplate;
    createOneTimeNotifReqTemplate: typeof createOneTimeNotifReqTemplate;
};
export default Messenger;
//# sourceMappingURL=Messenger.d.ts.map